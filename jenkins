Setup steps on Jenkins:
1. Ensure the Jenkins agent has Python and pip available.
2. Configure the Jenkins job as a 'Pipeline' job.
3. Select 'Pipeline script from SCM' and point it to your GitHub repository
   and the path of this file (Jenkinsfile).
*/
pipeline {
    // Define the environment where the steps will execute.
    // 'agent any' uses any available node. You could use 'agent { docker { image 'python:3.9-slim' } }'
    // for a more isolated, reproducible build environment if the Docker Pipeline plugin is installed.
    agent any

    stages {
        stage('Setup Environment') {
            steps {
                echo 'Setting up Python virtual environment and dependencies...'
                
                // Create a clean virtual environment
                sh 'python3 -m venv .venv'
                // Activate the environment and install dependencies
                // Note: The activation command needs to be on the same shell line as the pip install command 
                // in some environments, but this multi-line script often works better.
                sh '''
                    source .venv/bin/activate
                    pip install --no-cache-dir -r requirements.txt
                '''
            }
        }
        
        stage('Code Linting (Build)') {
            steps {
                echo 'Running static code analysis (flake8)...'
                // Run the linter inside the virtual environment
                sh '''
                    source .venv/bin/activate
                    flake8 app.py
                '''
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                echo 'Executing Python unit tests using pytest...'
                // Run tests using pytest, which automatically discovers unittest files (like test_app.py)
                // We generate a JUnit XML report (test-results.xml) for Jenkins to read.
                sh '''
                    source .venv/bin/activate
                    pytest --junitxml=test-results.xml test_app.py
                '''
            }
        }
    }

    post {
        // Post-build actions executed after all stages are complete
        always {
            echo 'Archiving test results and cleaning up.'
            
            // Collect test results using the JUnit plugin step. This ensures Jenkins displays the test results in the UI.
            junit 'test-results.xml'
            
            // Clean up the virtual environment directory
            sh 'rm -rf .venv'
        }
        success {
            echo 'Pipeline finished successfully! Code passed all checks.'
        }
        failure {
            echo 'Pipeline failed. Check the logs in the "Run Unit Tests" stage.'
        }
    }
}
